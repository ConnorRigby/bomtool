const c = @cImport({
    @cInclude("sqlite3.h");
    @cInclude("sqlite3ext.h");
});
pub usingnamespace c;

pub const Error = error{
    Error,
    Internal,
    Perm,
    Abort,
    Busy,
    Locked,
    Nomem,
    Readonly,
    Interrupt,
    Ioerr,
    Corrupt,
    Notfound,
    Full,
    Cantopen,
    Protocol,
    Empty,
    Schema,
    Toobig,
    Constraint,
    Mismatch,
    Misuse,
    Nolfs,
    Auth,
    Format,
    Range,
    Notadb,
    Notice,
    Warning,
    Done,
    Error_Missing_Collseq,
    Error_Retry,
    Error_Snapshot,
    Ioerr_Read,
    Ioerr_Short_Read,
    Ioerr_Write,
    Ioerr_Fsync,
    Ioerr_Dir_Fsync,
    Ioerr_Truncate,
    Ioerr_Fstat,
    Ioerr_Unlock,
    Ioerr_Rdlock,
    Ioerr_Delete,
    Ioerr_Blocked,
    Ioerr_Nomem,
    Ioerr_Access,
    Ioerr_Checkreservedlock,
    Ioerr_Lock,
    Ioerr_Close,
    Ioerr_Dir_Close,
    Ioerr_Shmopen,
    Ioerr_Shmsize,
    Ioerr_Shmlock,
    Ioerr_Shmmap,
    Ioerr_Seek,
    Ioerr_Delete_Noent,
    Ioerr_Mmap,
    Ioerr_Gettemppath,
    Ioerr_Convpath,
    Ioerr_Vnode,
    Ioerr_Auth,
    Ioerr_Begin_Atomic,
    Ioerr_Commit_Atomic,
    Ioerr_Rollback_Atomic,
    Ioerr_Data,
    Ioerr_Corruptfs,
    Locked_Sharedcache,
    Locked_Vtab,
    Busy_Recovery,
    Busy_Snapshot,
    Busy_Timeout,
    Cantopen_Notempdir,
    Cantopen_Isdir,
    Cantopen_Fullpath,
    Cantopen_Convpath,
    Cantopen_Dirtywal,
    Cantopen_Symlink,
    Corrupt_Vtab,
    Corrupt_Sequence,
    Corrupt_Index,
    Readonly_Recovery,
    Readonly_Cantlock,
    Readonly_Rollback,
    Readonly_Dbmoved,
    Readonly_Cantinit,
    Readonly_Directory,
    Abort_Rollback,
    Constraint_Check,
    Constraint_Commithook,
    Constraint_Foreignkey,
    Constraint_Function,
    Constraint_Notnull,
    Constraint_Primarykey,
    Constraint_Trigger,
    Constraint_Unique,
    Constraint_Vtab,
    Constraint_Rowid,
    Constraint_Pinned,
    Constraint_Datatype,
    Notice_Recover_Wal,
    Notice_Recover_Rollback,
    Notice_Rbu,
    Warning_Autoindex,
    Auth_User,
    Ok_Load_Permanently,
    Ok_Symlink,
};

pub const Status = enum(c_int) {
    ok = c.SQLITE_OK,
    @"error" = c.SQLITE_ERROR,
    internal = c.SQLITE_INTERNAL,
    perm = c.SQLITE_PERM,
    abort = c.SQLITE_ABORT,
    busy = c.SQLITE_BUSY,
    locked = c.SQLITE_LOCKED,
    nomem = c.SQLITE_NOMEM,
    readonly = c.SQLITE_READONLY,
    interrupt = c.SQLITE_INTERRUPT,
    ioerr = c.SQLITE_IOERR,
    corrupt = c.SQLITE_CORRUPT,
    notfound = c.SQLITE_NOTFOUND,
    full = c.SQLITE_FULL,
    cantopen = c.SQLITE_CANTOPEN,
    protocol = c.SQLITE_PROTOCOL,
    empty = c.SQLITE_EMPTY,
    schema = c.SQLITE_SCHEMA,
    toobig = c.SQLITE_TOOBIG,
    constraint = c.SQLITE_CONSTRAINT,
    mismatch = c.SQLITE_MISMATCH,
    misuse = c.SQLITE_MISUSE,
    nolfs = c.SQLITE_NOLFS,
    auth = c.SQLITE_AUTH,
    format = c.SQLITE_FORMAT,
    range = c.SQLITE_RANGE,
    notadb = c.SQLITE_NOTADB,
    notice = c.SQLITE_NOTICE,
    warning = c.SQLITE_WARNING,
    row = c.SQLITE_ROW,
    done = c.SQLITE_DONE,
    error_missing_collseq = c.SQLITE_ERROR_MISSING_COLLSEQ,
    error_retry = c.SQLITE_ERROR_RETRY,
    error_snapshot = c.SQLITE_ERROR_SNAPSHOT,
    ioerr_read = c.SQLITE_IOERR_READ,
    ioerr_short_read = c.SQLITE_IOERR_SHORT_READ,
    ioerr_write = c.SQLITE_IOERR_WRITE,
    ioerr_fsync = c.SQLITE_IOERR_FSYNC,
    ioerr_dir_fsync = c.SQLITE_IOERR_DIR_FSYNC,
    ioerr_truncate = c.SQLITE_IOERR_TRUNCATE,
    ioerr_fstat = c.SQLITE_IOERR_FSTAT,
    ioerr_unlock = c.SQLITE_IOERR_UNLOCK,
    ioerr_rdlock = c.SQLITE_IOERR_RDLOCK,
    ioerr_delete = c.SQLITE_IOERR_DELETE,
    ioerr_blocked = c.SQLITE_IOERR_BLOCKED,
    ioerr_nomem = c.SQLITE_IOERR_NOMEM,
    ioerr_access = c.SQLITE_IOERR_ACCESS,
    ioerr_checkreservedlock = c.SQLITE_IOERR_CHECKRESERVEDLOCK,
    ioerr_lock = c.SQLITE_IOERR_LOCK,
    ioerr_close = c.SQLITE_IOERR_CLOSE,
    ioerr_dir_close = c.SQLITE_IOERR_DIR_CLOSE,
    ioerr_shmopen = c.SQLITE_IOERR_SHMOPEN,
    ioerr_shmsize = c.SQLITE_IOERR_SHMSIZE,
    ioerr_shmlock = c.SQLITE_IOERR_SHMLOCK,
    ioerr_shmmap = c.SQLITE_IOERR_SHMMAP,
    ioerr_seek = c.SQLITE_IOERR_SEEK,
    ioerr_delete_noent = c.SQLITE_IOERR_DELETE_NOENT,
    ioerr_mmap = c.SQLITE_IOERR_MMAP,
    ioerr_gettemppath = c.SQLITE_IOERR_GETTEMPPATH,
    ioerr_convpath = c.SQLITE_IOERR_CONVPATH,
    ioerr_vnode = c.SQLITE_IOERR_VNODE,
    ioerr_auth = c.SQLITE_IOERR_AUTH,
    ioerr_begin_atomic = c.SQLITE_IOERR_BEGIN_ATOMIC,
    ioerr_commit_atomic = c.SQLITE_IOERR_COMMIT_ATOMIC,
    ioerr_rollback_atomic = c.SQLITE_IOERR_ROLLBACK_ATOMIC,
    ioerr_data = c.SQLITE_IOERR_DATA,
    ioerr_corruptfs = c.SQLITE_IOERR_CORRUPTFS,
    locked_sharedcache = c.SQLITE_LOCKED_SHAREDCACHE,
    locked_vtab = c.SQLITE_LOCKED_VTAB,
    busy_recovery = c.SQLITE_BUSY_RECOVERY,
    busy_snapshot = c.SQLITE_BUSY_SNAPSHOT,
    busy_timeout = c.SQLITE_BUSY_TIMEOUT,
    cantopen_notempdir = c.SQLITE_CANTOPEN_NOTEMPDIR,
    cantopen_isdir = c.SQLITE_CANTOPEN_ISDIR,
    cantopen_fullpath = c.SQLITE_CANTOPEN_FULLPATH,
    cantopen_convpath = c.SQLITE_CANTOPEN_CONVPATH,
    cantopen_dirtywal = c.SQLITE_CANTOPEN_DIRTYWAL,
    cantopen_symlink = c.SQLITE_CANTOPEN_SYMLINK,
    corrupt_vtab = c.SQLITE_CORRUPT_VTAB,
    corrupt_sequence = c.SQLITE_CORRUPT_SEQUENCE,
    corrupt_index = c.SQLITE_CORRUPT_INDEX,
    readonly_recovery = c.SQLITE_READONLY_RECOVERY,
    readonly_cantlock = c.SQLITE_READONLY_CANTLOCK,
    readonly_rollback = c.SQLITE_READONLY_ROLLBACK,
    readonly_dbmoved = c.SQLITE_READONLY_DBMOVED,
    readonly_cantinit = c.SQLITE_READONLY_CANTINIT,
    readonly_directory = c.SQLITE_READONLY_DIRECTORY,
    abort_rollback = c.SQLITE_ABORT_ROLLBACK,
    constraint_check = c.SQLITE_CONSTRAINT_CHECK,
    constraint_commithook = c.SQLITE_CONSTRAINT_COMMITHOOK,
    constraint_foreignkey = c.SQLITE_CONSTRAINT_FOREIGNKEY,
    constraint_function = c.SQLITE_CONSTRAINT_FUNCTION,
    constraint_notnull = c.SQLITE_CONSTRAINT_NOTNULL,
    constraint_primarykey = c.SQLITE_CONSTRAINT_PRIMARYKEY,
    constraint_trigger = c.SQLITE_CONSTRAINT_TRIGGER,
    constraint_unique = c.SQLITE_CONSTRAINT_UNIQUE,
    constraint_vtab = c.SQLITE_CONSTRAINT_VTAB,
    constraint_rowid = c.SQLITE_CONSTRAINT_ROWID,
    constraint_pinned = c.SQLITE_CONSTRAINT_PINNED,
    constraint_datatype = c.SQLITE_CONSTRAINT_DATATYPE,
    notice_recover_wal = c.SQLITE_NOTICE_RECOVER_WAL,
    notice_recover_rollback = c.SQLITE_NOTICE_RECOVER_ROLLBACK,
    notice_rbu = c.SQLITE_NOTICE_RBU,
    warning_autoindex = c.SQLITE_WARNING_AUTOINDEX,
    auth_user = c.SQLITE_AUTH_USER,
    ok_load_permanently = c.SQLITE_OK_LOAD_PERMANENTLY,
    ok_symlink = c.SQLITE_OK_SYMLINK,
};

pub fn status_to_error(status: Status) Error {
    return switch (status) {
        .@"error" => Error.Error,
        .internal => Error.Internal,
        .perm => Error.Perm,
        .abort => Error.Abort,
        .busy => Error.Busy,
        .locked => Error.Locked,
        .nomem => Error.Nomem,
        .readonly => Error.Readonly,
        .interrupt => Error.Interrupt,
        .ioerr => Error.Ioerr,
        .corrupt => Error.Corrupt,
        .notfound => Error.Notfound,
        .full => Error.Full,
        .cantopen => Error.Cantopen,
        .protocol => Error.Protocol,
        .empty => Error.Empty,
        .schema => Error.Schema,
        .toobig => Error.Toobig,
        .constraint => Error.Constraint,
        .mismatch => Error.Mismatch,
        .misuse => Error.Misuse,
        .nolfs => Error.Nolfs,
        .auth => Error.Auth,
        .format => Error.Format,
        .range => Error.Range,
        .notadb => Error.Notadb,
        .notice => Error.Notice,
        .warning => Error.Warning,
        .done => Error.Done,
        .error_missing_collseq => Error.Error_Missing_Collseq,
        .error_retry => Error.Error_Retry,
        .error_snapshot => Error.Error_Snapshot,
        .ioerr_read => Error.Ioerr_Read,
        .ioerr_short_read => Error.Ioerr_Short_Read,
        .ioerr_write => Error.Ioerr_Write,
        .ioerr_fsync => Error.Ioerr_Fsync,
        .ioerr_dir_fsync => Error.Ioerr_Dir_Fsync,
        .ioerr_truncate => Error.Ioerr_Truncate,
        .ioerr_fstat => Error.Ioerr_Fstat,
        .ioerr_unlock => Error.Ioerr_Unlock,
        .ioerr_rdlock => Error.Ioerr_Rdlock,
        .ioerr_delete => Error.Ioerr_Delete,
        .ioerr_blocked => Error.Ioerr_Blocked,
        .ioerr_nomem => Error.Ioerr_Nomem,
        .ioerr_access => Error.Ioerr_Access,
        .ioerr_checkreservedlock => Error.Ioerr_Checkreservedlock,
        .ioerr_lock => Error.Ioerr_Lock,
        .ioerr_close => Error.Ioerr_Close,
        .ioerr_dir_close => Error.Ioerr_Dir_Close,
        .ioerr_shmopen => Error.Ioerr_Shmopen,
        .ioerr_shmsize => Error.Ioerr_Shmsize,
        .ioerr_shmlock => Error.Ioerr_Shmlock,
        .ioerr_shmmap => Error.Ioerr_Shmmap,
        .ioerr_seek => Error.Ioerr_Seek,
        .ioerr_delete_noent => Error.Ioerr_Delete_Noent,
        .ioerr_mmap => Error.Ioerr_Mmap,
        .ioerr_gettemppath => Error.Ioerr_Gettemppath,
        .ioerr_convpath => Error.Ioerr_Convpath,
        .ioerr_vnode => Error.Ioerr_Vnode,
        .ioerr_auth => Error.Ioerr_Auth,
        .ioerr_begin_atomic => Error.Ioerr_Begin_Atomic,
        .ioerr_commit_atomic => Error.Ioerr_Commit_Atomic,
        .ioerr_rollback_atomic => Error.Ioerr_Rollback_Atomic,
        .ioerr_data => Error.Ioerr_Data,
        .ioerr_corruptfs => Error.Ioerr_Corruptfs,
        .locked_sharedcache => Error.Locked_Sharedcache,
        .locked_vtab => Error.Locked_Vtab,
        .busy_recovery => Error.Busy_Recovery,
        .busy_snapshot => Error.Busy_Snapshot,
        .busy_timeout => Error.Busy_Timeout,
        .cantopen_notempdir => Error.Cantopen_Notempdir,
        .cantopen_isdir => Error.Cantopen_Isdir,
        .cantopen_fullpath => Error.Cantopen_Fullpath,
        .cantopen_convpath => Error.Cantopen_Convpath,
        .cantopen_dirtywal => Error.Cantopen_Dirtywal,
        .cantopen_symlink => Error.Cantopen_Symlink,
        .corrupt_vtab => Error.Corrupt_Vtab,
        .corrupt_sequence => Error.Corrupt_Sequence,
        .corrupt_index => Error.Corrupt_Index,
        .readonly_recovery => Error.Readonly_Recovery,
        .readonly_cantlock => Error.Readonly_Cantlock,
        .readonly_rollback => Error.Readonly_Rollback,
        .readonly_dbmoved => Error.Readonly_Dbmoved,
        .readonly_cantinit => Error.Readonly_Cantinit,
        .readonly_directory => Error.Readonly_Directory,
        .abort_rollback => Error.Abort_Rollback,
        .constraint_check => Error.Constraint_Check,
        .constraint_commithook => Error.Constraint_Commithook,
        .constraint_foreignkey => Error.Constraint_Foreignkey,
        .constraint_function => Error.Constraint_Function,
        .constraint_notnull => Error.Constraint_Notnull,
        .constraint_primarykey => Error.Constraint_Primarykey,
        .constraint_trigger => Error.Constraint_Trigger,
        .constraint_unique => Error.Constraint_Unique,
        .constraint_vtab => Error.Constraint_Vtab,
        .constraint_rowid => Error.Constraint_Rowid,
        .constraint_pinned => Error.Constraint_Pinned,
        .constraint_datatype => Error.Constraint_Datatype,
        .notice_recover_wal => Error.Notice_Recover_Wal,
        .notice_recover_rollback => Error.Notice_Recover_Rollback,
        .notice_rbu => Error.Notice_Rbu,
        .warning_autoindex => Error.Warning_Autoindex,
        .auth_user => Error.Auth_User,
        .ok_load_permanently => Error.Ok_Load_Permanently,
        .ok_symlink => Error.Ok_Symlink,
        inline else => |e| @panic("SQLite status was not an error: " ++ @tagName(e)),
    };
}

pub const PrepareFlags = enum(c_uint) { persistent = c.SQLITE_PREPARE_PERSISTENT, normalize = c.SQLITE_PREPARE_NORMALIZE, no_vtab = c.SQLITE_PREPARE_NO_VTAB };

pub const ColumnType = enum(c_int) { int = c.SQLITE_INTEGER, float = c.SQLITE_FLOAT, text = c.SQLITE_TEXT, blob = c.SQLITE_BLOB, null = c.SQLITE_NULL };

pub const Column = union(ColumnType) {
    int: i64,
    float: f64,
    text: [:0]const u8,
    blob: []const u8,
    null: @TypeOf(null),
};

pub const Row = []Column;
